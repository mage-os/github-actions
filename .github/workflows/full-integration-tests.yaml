name: Integration Tests - Full Test Suite
run-name: ${{ github.actor }} is running Full Integration Test Suite

on:
  workflow_call:
    inputs:
      repository:
        type: string
        description: "Repository"
        required: true
      head:
        type: string
        description: "head SHA"
        required: true
      test_directory:
        type: string
        description: "Test directory to run integration tests"
        required: false

permissions:
  contents: write

jobs:
  matrix-calculator:
    runs-on: ubuntu-latest
    outputs:
      php_versions: ${{ steps.set-matrix.outputs.php_versions }}
      database_versions: ${{ steps.set-matrix.outputs.database_versions }}
      search_versions: ${{ steps.set-matrix.outputs.search_versions }}
      message_queue_versions: ${{ steps.set-matrix.outputs.message_queue_versions }}
      cache_versions: ${{ steps.set-matrix.outputs.cache_versions }}
      http_cache_versions: ${{ steps.set-matrix.outputs.http_cache_versions }}
      testsuite_dirs: ${{ steps.set-matrix-testsuite.outputs.testsuite_dirs }}
    steps:
      - name: Checkout commit
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repository }}
          ref: ${{ github.event.inputs.head }}
          fetch-depth: 1

      - id: set-matrix
        name: Calculate Matrix
        run: |
          echo "php_versions=$(jq -c .services.php supported-services.json)" >> "$GITHUB_OUTPUT"
          echo "database_versions=$(jq -c .services.database supported-services.json)" >> "$GITHUB_OUTPUT"
          echo "search_versions=$(jq -c .services.search supported-services.json)" >> "$GITHUB_OUTPUT"
          echo "message_queue_versions=$(jq -c .services.message_queue supported-services.json)" >> "$GITHUB_OUTPUT"
          echo "cache_versions=$(jq -c .services.cache supported-services.json)" >> "$GITHUB_OUTPUT"
          echo "http_cache_versions=$(jq -c .services.http_cache supported-services.json)" >> "$GITHUB_OUTPUT"

      - id: set-matrix-testsuite
        name: Calculate Matrix for testsuite
        working-directory: dev/tests/integration
        run: |
          
          # check if ${{ github.event.inputs.test_directory }} is set
          # then set ${{ github.event.inputs.test_directory }} as output and exit
          # old output: echo "testsuite_dirs=$(jq -c .testsuites integration-testsuites.json)" >> "$GITHUB_OUTPUT"
          
          if [ -n "${{ github.event.inputs.test_directory }}" ]; then
              echo "testsuite_dirs=['${{ github.event.inputs.test_directory }}']" >> "$GITHUB_OUTPUT"
              exit 0
          fi
          
          OUTPUT_FILE="integration-testsuites.json"
          TESTSUITE_DIR="./testsuite/Magento"
          CODE_DIR="../../../app/code"
          MAX_DIRS_PER_LINE=1

          # Initialize variables
          dir_count=0
          json_content="{\n\t\"testsuites\": [\n\t\t\""
          current_line=""

          # Function to add a directory to the current line, handling comma and count
          add_dir_to_line() {
            local dir=$1
            # Check if current_line is empty to avoid leading commas
            if [ -z "$current_line" ]; then
            current_line="$dir"
            else
            current_line="$current_line,$dir"
            fi
            dir_count=$((dir_count + 1))

            if [ "$dir_count" -eq "$MAX_DIRS_PER_LINE" ]; then
            json_content="$json_content$current_line"
            json_content="$json_content\",\n\t\t\""
            current_line=""
            dir_count=0
            fi
          }

          # Iterate over the directories and populate the JSON content
          while IFS= read -r -d '' dir; do
          add_dir_to_line "${dir}"
          done < <(find "$TESTSUITE_DIR" -mindepth 1 -maxdepth 1 -type d -print0)

          # Add app/code integration test directories
          while IFS= read -r -d '' dir; do
              relative_dir="${dir}" # Convert absolute path to relative
              add_dir_to_line "$relative_dir"
          done < <(find "$CODE_DIR" -mindepth 4 -maxdepth 4 -type d -name 'Integration' -print0)

          # Handle the last line if it's not empty
          if [ -n "$current_line" ]; then
          json_content="$json_content$current_line"
          fi

          # Close the JSON string
          json_content="$json_content\"\n\t]\n}\n"

          # Write to the output file
          echo -e "$json_content" > "$OUTPUT_FILE"

          #######
          echo "testsuite_dirs=$(jq -c .testsuites integration-testsuites.json)" >> "$GITHUB_OUTPUT"

      - name: Debug output
        run: |
          echo "PHP Versions: ${{ steps.set-matrix.outputs.php_versions }}"
          echo "database Versions: ${{ steps.set-matrix.outputs.database_versions }}"
          echo "search Versions: ${{ steps.set-matrix.outputs.search_versions }}"
          echo "message_queue Versions: ${{ steps.set-matrix.outputs.message_queue_versions }}"
          echo "cache Versions: ${{ steps.set-matrix.outputs.cache_versions }}"
          echo "http_cache Versions: ${{ steps.set-matrix.outputs.http_cache_versions }}"
          echo "testsuite_dirs: ${{ steps.set-matrix-testsuite.outputs.testsuite_dirs }}"

  run-integration-tests:
    needs: [matrix-calculator]
    strategy:
      fail-fast: false
      matrix:
        php_version: ${{ fromJSON(needs.matrix-calculator.outputs.php_versions) }}
        database_version: ${{ fromJSON(needs.matrix-calculator.outputs.database_versions) }}
        search_version: ${{ fromJSON(needs.matrix-calculator.outputs.search_versions) }}
        message_queue_version: ${{ fromJSON(needs.matrix-calculator.outputs.message_queue_versions) }}
        cache_version: ${{ fromJSON(needs.matrix-calculator.outputs.cache_versions) }}
        http_cache_version: ${{ fromJSON(needs.matrix-calculator.outputs.http_cache_versions) }}
        testsuite_dirs: ${{ fromJSON(needs.matrix-calculator.outputs.testsuite_dirs) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout commit
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repository }}
          ref: ${{ github.event.inputs.head }}
          path: main
          fetch-depth: 0

      - name: Setup Warden Environment
        uses: mage-os/github-actions/warden/setup-environment@main
        with:
          run_composer_install: 1
          php_version: ${{ matrix.php_version }}
          database: ${{ matrix.database_version }}
          search: ${{ matrix.search_version }}
          rabbitmq: ${{ matrix.message_queue_version }}
          redis: ${{ matrix.cache_version }}
          varnish: ${{ matrix.http_cache_version }}
          base_directory: "./main"

      - name: Setup configs for Integration Tests
        uses: mage-os/github-actions/warden/integration-tests@main
        with:
          search: ${{ matrix.search_version }}
          rabbitmq: ${{ matrix.message_queue_version }}
          redis: ${{ matrix.cache_version }}
          run_memory_test: 0
          run_magento_integration_tests: 0
          run_magento_integration_tests_real_suite: 0
          base_directory: "./main"

      - name: Create Mage-OS testsuite
        working-directory: ./main/dev/tests/integration
        run: |
          FILE="phpunit.xml.dist"
          DIRS="${{ matrix.testsuite_dirs }}"
          echo "Debug: $DIRS"
          NEW_TESTSUITE_ENTRY=$(
            echo "<testsuite name=\"Mage-OS Suite\">"
            IFS=','; for dir in $DIRS; do echo "  <directory>$dir</directory>"; done
            echo "</testsuite>"
          )
          echo "Debug: $NEW_TESTSUITE_ENTRY"
          awk -v new_testsuite="$NEW_TESTSUITE_ENTRY" '/<\/testsuites>/ { print new_testsuite; found=1 } {print} END { if (!found) print new_testsuite }' "$FILE" > tmpfile && mv tmpfile "$FILE"
          echo "\nMage-OS suite has been added to $FILE \n"
          cat $FILE;

      - name: Run Integration Tests for Modules
        working-directory: ./main
        run: |
          export DEN="$(dirname $(pwd))/warden/bin/warden"
          ${DEN} env exec -T --workdir /var/www/html/dev/tests/integration php-fpm ../../../vendor/bin/phpunit --configuration phpunit.xml.dist --testsuite 'Mage-OS Suite' --log-junit=../../../phpunit-output/junit/res-log.xml --coverage-html=../../../phpunit-output/coverage-html/res.html

  rum-memory-integration-tests:
    needs: [ matrix-calculator ]
    strategy:
      fail-fast: false
      matrix:
        php_version: ${{ fromJSON(needs.matrix-calculator.outputs.php_versions) }}
        database_version: ${{ fromJSON(needs.matrix-calculator.outputs.database_versions) }}
        search_version: ${{ fromJSON(needs.matrix-calculator.outputs.search_versions) }}
        message_queue_version: ${{ fromJSON(needs.matrix-calculator.outputs.message_queue_versions) }}
        cache_version: ${{ fromJSON(needs.matrix-calculator.outputs.cache_versions) }}
        http_cache_version: ${{ fromJSON(needs.matrix-calculator.outputs.http_cache_versions) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout commit
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repository }}
          ref: ${{ github.event.inputs.head }}
          path: main
          fetch-depth: 0

      - name: Setup Warden Environment
        uses: mage-os/github-actions/warden/setup-environment@main
        with:
          run_composer_install: 1
          php_version: ${{ matrix.php_version }}
          database: ${{ matrix.database_version }}
          search: ${{ matrix.search_version }}
          rabbitmq: ${{ matrix.message_queue_version }}
          redis: ${{ matrix.cache_version }}
          varnish: ${{ matrix.http_cache_version }}
          base_directory: "./main"

      - name: Run Integration tests
        uses: mage-os/github-actions/warden/integration-tests@main
        with:
          search: ${{ matrix.search_version }}
          rabbitmq: ${{ matrix.message_queue_version }}
          redis: ${{ matrix.cache_version }}
          run_memory_test: "true"
          base_directory: "./main"
